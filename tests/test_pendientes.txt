# ---------------------- para eliminar --------------------------------

delete_mentions_by_content_id(35)
delete_hashtags_by_content_id(35)
delete_posts_by_content_id(35)
delete_content_by_content_id(35)
delete_user_by_username(USERNAME_1)

# ---------------------- test pendientes post ---------------------------

# funciones a testear
# def api_get_posts_and_reposts_from_user_visited(
#     user_visited_email: str,
#     oldest_date_str: str,
#     amount: int,
#     only_reposts: bool = Query(...),
#     token: str = Header(...),
#     user: callable = Depends(get_user_from_token),
# )
# def api_get_post_by_id(
#     post_id: int,
#     token: str = Header(...),
#     user: callable = Depends(get_user_from_token),
# )
# def api_get_amount_posts_from_user_visited(
#     user_visited_email: str,
#     token: str = Header(...),
#     user: callable = Depends(get_user_from_token),
# )
#     def api_get_feed(
#     oldest_date_str: str,
#     amount: int,
#     token: str = Header(...),
#     user: callable = Depends(get_user_from_token),
# )
# def api_get_statistics(
#     from_date_str: str,
#     to_date_str: str,
#     token: str = Header(...),
#     user: callable = Depends(get_user_from_token),
# )
# def api_get_posts_by_hashtags(
#     hashtags: str,
#     offset=Query(0, title="offset", description="offset for pagination"),
#     amount=Query(10, title="ammount", description="max ammount of users to return"),
#     token: str = Header(...),
#     user: callable = Depends(get_user_from_token),
# )
# def api_get_posts_by_text(
#     text: str,
#     offset=Query(0, title="offset", description="offset for pagination"),
#     amount=Query(10, title="ammount", description="max ammount of users to return"),
#     token: str = Header(...),
#     user: callable = Depends(get_user_from_token),
# )
# def api_update_post(
#     post_id: int,
#     post_data: PostCreateRequest,
#     token: str = Header(...),
#     user: callable = Depends(get_user_from_token),
# )
# def api_delete_post(
#     post_id: int,
#     token: str = Header(...),
#     user: callable = Depends(get_user_from_token),
# )
